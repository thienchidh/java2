<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;trim&apos; from expression &apos;e.trim()&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Variable name: &apos;trim&apos;&#x0D;&#x0A;- Destination method: &apos;test.TestEmployeeManager.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;e.trim()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;trim&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{TestEmployeeManager.java" name="trim" replace="true" selection="325 8" stamp="1566480157213" version="1.0"/>&#x0A;<refactoring comment="Inline local variable &apos;test.TestEmployeeManager.main().e&apos; in &apos;test.TestEmployeeManager.main()&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Original element: &apos;test.TestEmployeeManager.main().e&apos;" description="Inline local variable &apos;e&apos;" id="org.eclipse.jdt.ui.inline.temp" input="/src&lt;test{TestEmployeeManager.java" selection="341 12" stamp="1566480176804" version="1.0"/>&#x0A;<refactoring comment="Extract method &apos;private boolean extracted(String s2, int j)&apos; from &apos;test.TestEmployeeManager.isAnagram()&apos; to &apos;test.TestEmployeeManager&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Method name: &apos;extracted&apos;&#x0D;&#x0A;- Destination type: &apos;test.TestEmployeeManager&apos;&#x0D;&#x0A;- Declared visibility: &apos;private&apos;&#x0D;&#x0A;- Replace occurrences of statements with method" comments="false" description="Extract method &apos;extracted&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;test{TestEmployeeManager.java" name="extracted" replace="true" selection="319 42" stamp="1566481649716" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Rename local variable &apos;s2&apos; in &apos;test.MyTest.isSpaceOrDot(...)&apos; to &apos;x&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Original element: &apos;test.MyTest.isSpaceOrDot(String, int).s2&apos;&#x0D;&#x0A;- Renamed element: &apos;s2&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;s2&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;test{TestEmployeeManager.java[MyTest~isSpaceOrDot~QString;~I@s2!662!670!669!670!QString;!0!true" name="x" references="true" stamp="1566481783687" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;j&apos; in &apos;test.MyTest.isSpaceOrDot(...)&apos; to &apos;index&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Original element: &apos;test.MyTest.isSpaceOrDot(String, int).j&apos;&#x0D;&#x0A;- Renamed element: &apos;j&apos;&#x0D;&#x0A;- Update references to refactored element" description="Rename local variable &apos;j&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;test{TestEmployeeManager.java[MyTest~isSpaceOrDot~QString;~I@j!672!676!676!676!I!0!true" name="index" references="true" stamp="1566481788148" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;charAt&apos; from expression &apos;x.charAt(i)&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Variable name: &apos;charAt&apos;&#x0D;&#x0A;- Destination method: &apos;test.MyTest.removeDotSpace()&apos;&#x0D;&#x0A;- Variable expression: &apos;x.charAt(i)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;charAt&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{TestEmployeeManager.java" name="charAt" replace="true" selection="419 11" stamp="1566482250336" version="1.0"/>&#x0A;&#x0A;&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;new StringBuilder().append(y).toString()&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Variable name: &apos;string&apos;&#x0D;&#x0A;- Destination method: &apos;test.MyTest.isAnagram()&apos;&#x0D;&#x0A;- Variable expression: &apos;new StringBuilder().append(y).toString()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{TestEmployeeManager.java" name="string" replace="true" selection="431 40" stamp="1566482655741" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;new StringBuilder().append(x).toString()&apos;&#x0D;&#x0A;- Original project: &apos;CustomProject&apos;&#x0D;&#x0A;- Variable name: &apos;string&apos;&#x0D;&#x0A;- Destination method: &apos;test.MyTest.isAnagram()&apos;&#x0D;&#x0A;- Variable expression: &apos;new StringBuilder().append(x).toString()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;test{TestEmployeeManager.java" name="string" replace="true" selection="443 40" stamp="1566482674879" version="1.0"/>
</session>